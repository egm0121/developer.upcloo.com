<div class="content">
    <div class="row">
        <div class="span12">
            <h1>Zend Framework</h1>
            <p>
                If you use the Zend Framework you can use this 
                section for bootstraping the library and other things.
            </p>
            <h2>Load Resources</h2>
            <p>
                In your <code>application.ini</code> you have to load the UpCloo 
                resources namespace and the UpCloo general namespace as follow
            </p>
            <pre class="prettyprint linenums">autoloadernamespaces.UpCloo = "UpCloo_"</pre>
            <p>
                After that you have to load the resource section
            </p>
            <pre class="prettyprint linenums">
;Consider the real path where you put UpCloo library
pluginPaths.UpCloo_Zend_Application_Resource = APPLICATION_PATH "/library/UpCloo/Zend/Application/Resource"</pre>
            <p>
                Now you are ready for load it as follow:
            </p>
            <pre class="prettyprint linenums">
resources.upcloo.username = "your-username"
resources.upcloo.password = "your-password"
resources.upcloo.sitekey = "your-sitekey"</pre>
            <h3>Bootstrap with local storage</h3>
            <p>
                You can start the library using the local storage
            </p>
            <pre class="prettyprint linenums">
resources.upcloo.storage = APPLICATION_PATH "/../system/storage.db"</pre>
            <p>
                UpCloo library starts using the local storage.
            </p>
            <h2>Simplify UpCloo with ZF helpers</h2>
            <p>
            	If you want, you can symplify the UpCloo integration into an existing Zend app
            	using UpCloo helpers. This strategy is based on different concepts:
            </p>
            <ul>
            	<li>
            		Action Helper: <code>upcloo()</code>
            		<ul>
            			<li>Used into your controllers passing useful information for UpCloo: id, title, etc.</li>
            		</ul>
            	</li>
            	<li>
            		View Helper: <code>upcloo()</code>
            		<ul>
            			<li>Simple View Helper for represent the UpCloo content.</li>
            		</ul>
            	</li>
            	<li>
            		Controller Plugin: <code>UpClooRemoteImporter</code>
            		<ul>
            			<li>Useful for enabling the UpCloo Remote Importer.</li>
            		</ul>
            	</li>
            </ul>
            <p>
            	All of above must be present into your <code>application.ini</code>:
            </p>
            <pre class="prettyprint linenums">
resources.frontController.actionHelperPaths.UpCloo_Zend_Controller_Action_Helper = "UpCloo/Zend/Controller/Action/Helper"
resources.frontController.plugins.UpClooRemoteImporter = "UpCloo_Zend_Controller_Plugin_UpClooRemoteImporter"
resources.view.helperPath.UpCloo_Zend_View_Helper = "UpCloo/Zend/View/Helper</pre>
            <p>
            	You can disable (put a semicolon before) all of this rules without any
            	problem.
            </p>
            <p>
            	For more information around Zend Framework Application <a href="/application/zf.html">see here</a>.
            </p>
            <h2>Bootstrap resource in test (read-only)</h2>
            <p>
                If you want a read-only UpCloo instance for your testing 
                scope you can use the <code>UpClooMock</code> client.
            </p>
            <pre class="prettyprint linenums">
[testing : production]
resources.upcloo.client = "UpClooMock"

[development : production]
resources.upcloo.client = "UpClooMock"</pre>
        </div>
    </div>
</div>